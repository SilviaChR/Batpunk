---
title: "Proyecto Final"
author: "Silvia Chaves-Ramírez"
date:  "`r Sys.Date()`"
output:
  html_document:
    fig_caption: yes
    number_sections: no
    toc: yes
    toc_depth: 4
    toc_float: yes
    df_print: paged
bibliography: library.bib   
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


# Pregunta de investigación

¿El tamaño de los ámbitos de descanso de los grupos  *Thyroptera tricolor*  esta infuenciado por el tamaño del grupo?  


*Thyroptera tricolor* es una  especie de murciélago que forma grupos sociales para refugiarse. Ésta especie utiliza hojas tubulares en crecimiento del orden zingiberales como refugio, y al ser éste un recurso efímero,sus ocupantes deben a buscar un nuevo refugio diariamente.
 Estudios anteriores han demostrado que los grupos de *T.tricolor* mantienen pequeños ámbitos de descanso con alta disponibilidad de refugios [@Vonhof2004].
 
Por lo que se sugiere que esta especie de murciélago es territorial. hasta el momento no existe ningún estudio que ponga a prueba esta  hipóstesis. Por lo que es necesario entender como afecta la disponibilidad de refugios en la superposición de ambitos de  descanso  y se deconoce  varían en tamaño los ámbitos de descanso según el número de individuos que conforman cada grupo.
 

Para este  proyecto de investigación  voy a simular la disponibilidad de refugios  para *T. tricolor* en un hábitat  y apartir de ahí  voy a extraer datos espaciales simulados de recapturas de grupos de murciélagos en los refugios. Luego voy a estimar los ámbitos de descanso para diferentes grupos.Por último  voy aplicar un modelo lineal para determinar el efecto del tamaño del grupo sobre el tamaño de los ámbitos de descanso. 

# Hipótesis  y  predicción 

En animales territoriales los grupos más numerosos de ocupan ámbitos de hogar más grandes y con mayor cantidad de recursos, ya que al ser más numerosos pueden defender mejor un área.

**Predicción:** Si *T.tricolor* es una especie territorial, espero encontrar que entre más grande sea el grupo mayor será el ámbito de descanso.

---

# Diagrama causal  

Quiero conocer el efecto del tamaño del grupo sobre el tamaño de los ámbitos de descanso de los grupos de *Thyroptera tricolor* (AD).Sin embargo se que la disponibilidad  de refugios(H) también podría estar influenciando el tamaño de los ámbitos de descanso en esta especie.  
```{r, echo=FALSE, warning = FALSE, message = FALSE}
# install_github("jtextor/dagitty/r")
require(dagitty)

# install.packages("ggdag")
require(ggdag)

# install.packages("wesanderson")
require(wesanderson)




#Modelo con un DAG:
  
# x = H
# z = TG
# y = AD

# Crear DAG
dag1 <- dagify(AD ~ TG,
                   AD~ H,
                   exposure = "TG",
                   outcome = "AD")

# compactar
tidy_dagitty(dag1)
```


```{r, echo=FALSE, fig.align='center', warning = FALSE, message = FALSE}
# graficar  
ggdag(dag1, layout = "circle") + theme_dag() 

# No  existe un flujo de información  entré el tamaño del grupo y la densidad  de hojas disponibles , por lo que no es necesario controlar  

```

---


# Código de  simulación 


```{r, warning = FALSE, message = FALSE}
# Se cargan los paquetes necesarios para los análisis  

library(adehabitatHR) # Home Range Estimation 
library(ggplot2)

```


### Simulación de hábitat para grupos de *T.tricolor*. 
 
Para simular datos aleatorios que similares al patrón  de distribución de hojas disponibles como refugios y las ubicaciones  de grupos de *T.tricolor*  observado en la naturaleza, apliqué un movimiento Browniano estandar, como se detalla a continuación:


```{r Habitat}

#Funciones-----------

#Simulación de Hábitat ---  

#En esta función  es para generar las hojas disponibles como refugios dentro de un área de muestreo  200 x 300 m2. También crean las variables para el número de grupos,  número de individuos por grupo   

sim_habitat <- function(n_groups, n_indiv, n_leaves = 3000, steps = 10000, sig2 = 0.7, plot = TRUE, xlim = c(0, 300), ylim = c(0, 200)) {


  if (n_leaves >= steps){
    cat(crayon::green(' Alto ahí, no se puede tener más hojas que steps\n'))
  stop()
}
  
t <- 0:steps  # Saltos de tiempo  en el que varia la distribución de hojas en el espacio

## Primero, se crea un set simulación de desviaciones con σ2= 0.7, para los valores de x
x <- rnorm(n = length(t) - 1, sd = sqrt(sig2))

## Ahora se  calcula la suma acumulada de las desviaciones 
cx <- c(0, cumsum(x))
 plot(t, cx, type = "l", ylim = range(cx))

## Se repiten los dos pasos anteriores para los valores de y
y <- rnorm(n = length(t) - 1, sd = sqrt(sig2))
## suma acumulada de las desviaciones para valores de y
cy <- c(0, cumsum(y))

# Simulación de hojas disponibles como refugios---

sel_positions_x <- cumsum((rbinom(n_leaves, size = 2, prob = 0.1) * 400) + 50)
sel_positions_y <- cumsum((rbinom(n_leaves, size = 2, prob = 0.1) * 400) + 50)

sel_positions_x <- (sel_positions_x / max(sel_positions_x)) * steps
sel_positions_y <- (sel_positions_y / max(sel_positions_y)) * steps

slxs <- cx[sel_positions_x]
slys <- cy[sel_positions_y]

# Obtenemos las coordenadas  para el número de hojas disponibles como refugio dentro de los limites del área de estudio  200 x300 m2
slxs <- slxs + abs(min(slxs))
slxs <- (slxs / max(slxs)) * xlim[2]
slys <- slys + abs(min(slys))
slys <- (slys / max(slys)) * ylim[2]

# Se guardan las coordenadas de las hojas en  un data frame
coor_df <- data.frame(lon= slxs, lat = slys)

if (plot)
plot(coor_df$lon, coor_df$lat, pch = 20, col = adjustcolor("green", alpha.f = 0.3), xlim = xlim + c(-10, 10), ylim = ylim + c(-10, 10))


return(coor_df) 
}

# Simulación ubicación de grupos---

# Simular las coordenadas de ubicación para 10 grupos de murciélagos 
ubi_groups <- function(leaf_coors, groups, radius_constant = 6){
  
    if (groups >= nrow(leaf_coors)){
    cat(crayon::green('No se puede tener más grupos q hojas \n'))
  stop()
}
# Aleatorizar el tamaño  para los 10 grupos con una  probabilidad que permita  obtener  valores similares a los de los grupos  en la naturaleza.
  
  group_sizes <- rbinom(n = groups, 10, prob = 0.6)
  
# extraemos una hoja central para cada grupo  
  leaves <- sample(1:nrow(leaf_coors), length(group_sizes))
# obtenemos  las coordenanadas para cada hoja central 
  centers <- leaf_coors[leaves, ]  
  
  centers$group_size <- group_sizes

  centers$leaves <- leaves 
  
# Se calculan todas las distancias posibles entre la hoja central  mediante una matriz de distancia  entre las hojas disponibles.
  dist_leaves <- as.matrix(dist(leaf_coors))
  
  group_leaves_l <- lapply(1:nrow(centers), function(x){
    
    dists_to_center <- dist_leaves[centers$leaves[x], ]
    
# Se seleccionan las hojas  cuya distancia al centro sea proporcion tamaño del grupo multiplicado por un radio constante.  
    selec_leaves <- dists_to_center[dists_to_center < centers$group_size[x] * radius_constant] 
    
# Se crea un data frame de las hojas selecionadas y sus respectivas coordenadas. 
    selec_leaves_df <- leaf_coors[names(selec_leaves), ]
    
    selec_leaves_df$leaf_id <- names(selec_leaves)
    
    selec_leaves_df$dist_to_center <- selec_leaves
    
    selec_leaves_df$group_size <- centers$group_size[x]
    
    selec_leaves_df$id <- x
    
    return(selec_leaves_df)
    
  })
  group_leaves <- do.call(rbind, group_leaves_l)
  
 return(group_leaves) # Asumimos que todas las hojas que se seleccionan aleatoriamente entreel radio y  la hoja central forman parte de los ámbitos de descanso de cada grupo.
}

#Estimación de ámbitos de descanso  de Kernel--- 

#Función para obtener  determinar estimar los ámbitos de descanso para cada grupo,  con un 95% de confianza.

get_home_range <- function(X, percent = 95){

# Para utilizar las funciones del paquete "adehabitatHR" las coordenadas de los grupos deben convertirse en un objeto de clase SpatialPointsDataFrame 
  
  Y <- SpatialPointsDataFrame(X[, c("lat", "lon")], as.data.frame(X$id))
  
# Se estima los ámbitos de descanso mediante un  la funcion #?kernelUD() que estima la probabilidad de densidad de kernel  

  ud <- try(kernelUD(Y), silent = TRUE)
  
  areas <- unlist(as.data.frame(kernel.area(ud, percent = percent))[1,, drop = TRUE])

# Esta  función devuelve las áreas de los  ámbitos de hogar para cada grupo  para cada  grupo
  
  areas_df <- data.frame(group = 1:length(areas), area = areas, group_size = sapply(unique(X$id), function(e) X$group_size[X$id == e][1]))

  return(areas_df)
}


### Submuestreo
#   Para  verificar  ssi el resultado obtenido para  el modelo  de la relación entre el tamaño del grupo y el tamaño del ambito se mantiene.  
resample_leaves <- function(X, n = 30){
  
  out <- lapply(unique(X$id), function(x){
    
    Y <- X[X$id == x, ]
    
    if (nrow(Y) > n) 
      Y <- Y[sample(1:nrow(Y), n), ]
    
    return(Y)
    
  })
  
  return(do.call(rbind, out))
  
}
```

### Estimación de ámbitos de descanso 

```{r, warning = FALSE, message = FALSE}
# Se asume que las  coordenadas  de las hojas simuladas son reubicaciónes de grupos  dentro de los ambitos de descanso para 10 grupos 

leaf_coors <- sim_habitat(n_leaves = 1000, plot = FALSE)

sims <- ubi_groups(leaf_coors = leaf_coors, groups = 10, radius_constant = 6)

tab <- table(sims$id)
## Esto es para obtener el numero de hojas  que  hay en cada territorio 
sims <- sims[!sims$id %in% names(tab[tab < 5]), ]

#  Se crea un set de datos  que contiene el área del ámbito de descanso y el número de individuos para cada grupo 

range_and_size <- get_home_range(X = sims)
```

# Análisis 

Para determinar el efecto  que tiene  el tamaño  del grupo sobre el tamaño de los ámbitos de descanso de *t.tricolor* realicé modelo lineal utilizando como variable de respuesta el tamaño del ámbito de descanso y como variable predictora el número de individuos que componen los grupos . Luego apliqué un el mismo modelo para un submuestreo de 30 reubicaciones, con el fin de verificar si el patrón obtenido se mantiene con  el mínimo de reubicaciones recomendadas para los anamisis de  estimación de ambitos de Hogar utilizando modelos probabilidad de desnidad de kernel.



```{r, echo= FALSE, fig.align='center', warning = FALSE, message = FALSE}
mod <- lm(area ~ group_size, data = range_and_size)
summary(mod)


```


```{r, echo=FALSE, warning = FALSE, message = FALSE}
resamp_sims <- resample_leaves(sims, n = 30)


table(resamp_sims$id)

#  
resample_range_and_size <- get_home_range(X = resamp_sims)
mod2 <- lm(area ~ group_size, data = resample_range_and_size)
summary(mod2)


```
# Interpretación de resultados 

Los análsis realizados demuestran que  el número de individuos 
```{r echo=FALSE, warning = FALSE, message = FALSE}

ggplot(range_and_size, aes(group_size, area)) +
 geom_point(aes(group_size, area)) +
 geom_smooth(method ="lm") +
 xlab("Número de individuos") + 
 ylab("Tamaño del ámbito de descanso") +
 scale_color_gradient() +
 theme_bw()

ggplot(resample_range_and_size, aes(group_size, area)) +
 geom_point(aes(group_size, area)) +
 geom_smooth(method ="lm") +
 xlab("Número de individuos") + 
 ylab("Tamaño del ámbito de descanso") +
 scale_color_gradient() +
 theme_bw()
```

**Figura.1**. Relación entre el número de individuos para diferentes grupos  y el tamaño de sus ámbitos de descanso correspondientes.

```{r, include=FALSE}

 
  # dist_leaves[dist_leaves == 0] <- NA
  # 
  # sel_leaf <- 1
  # 
  # 
  # group_size <- rbinom(30, 10, 0.5) + 1
  # group_range_prob <- (group_size / max(group_size)) / 4
  # 
  # groups <- 10
  # cols <- viridis::viridis(groups, alpha = 0.6)
  # 
  # for(e in 1:10){
  # 
  #   if (e == 1)
  #   sl <- sel_leaf <- sample(1:nrow(leaf_coors), 1) else {
  # 
  #     disp_leaves <- dist_leaves[sel_leaf, ]
  #     disp_leaves <- disp_leaves[disp_leaves > quantile(disp_leaves, 0.1, na.rm = TRUE)]
  # 
  #     sl <- sel_leaf <- sample(names(disp_leaves), 1)
  #     }
  # 
  #   # initial group leaf
  #   points(leaf_coors[sel_leaf, ], pch = 20, cex = 5, col = adjustcolor("white", alpha.f = 0.8))
  #   text(leaf_coors[sel_leaf, ], labels = e, cex = 2, adj = c(0.5, 0.5))
  # 
  #   for(i in 1:29){
  # 
  #     disp_leaves <- dist_leaves[sel_leaf, ]
  #     disp_leaves <- disp_leaves[disp_leaves < quantile(disp_leaves, group_range_prob[e] , na.rm = TRUE)]
  # 
  #     sel_leaf <- NA
  #     while(is.na(sel_leaf))
  #     sel_leaf <- picked_leave <- sample(names(disp_leaves), 1)
  # 
  #   # picked_leave <- sample(names(sort(dist_leaves[sel_leaf, ]))[1:30], 1)
  # 
  #   points(leaf_coors[picked_leave,], col = cols[e])
  # 
  #  # sel_leaf <- picked_leave
  #   }
  #   # initial group leaf
  #   points(leaf_coors[sl, ], pch = 20, cex = 5, col = adjustcolor("white", alpha.f = 0.5))
  #   text(leaf_coors[sl, ], labels = e, cex = 2, adj = c(0.5, 0.5), col = "gray40")
  # 
  # Sys.sleep(0.1)
  #   }


```
# Referencias 

```{r  include=FALSE}
sessionInfo()
```