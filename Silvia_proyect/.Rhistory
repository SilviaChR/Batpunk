# Crear DAG
dagified <- dagify(y ~ x,
y ~ z,
exposure = "x",
outcome = "y")
# compactar
tidy_dagitty(dagified)
# graficar
ggdag(dagified, layout = "circle") + theme_dag()
# install.packages("ggdag")
require(ggdag)
# install.packages("wesanderson")
require(wesanderson)
dagified <- dagify(y ~ x,
y ~ z,
exposure = "x",
outcome = "y")
# compactar
tidy_dagitty(dagified)
# graficar
ggdag(dagified, layout = "circle") + theme_dag()
# Crear DAG
dag1 <- dagify(S ~ D,
S ~ TG,
exposure = "D",
outcome = "S")
# compactar
tidy_dagitty(dag1)
# graficar
ggdag(dag1, layout = "circle") + theme_dag()
# graficar
ggdag(dag1, layout = "circle") +
theme_dag() +
scale_color_hue(breaks  = c("TG", "D"))
# From github
devtools::install_github("maRce10/sketchy")
# load package
library(sketchy)
# From github
devtools::install_github("maRce10/sketchy")
# load package
library(sketchy)
getwd()
# From github
devtools::install_github("maRce10/sketchy")
install.packages("glue")
library(glue)
# From github
devtools::install_github("maRce10/sketchy")
# load package
library(sketchy)
# From github
devtools::install_github("maRce10/sketchy")
# load package
library(sketchy)
# From github
devtools::install_github("maRce10/sketchy")
remove.packages("xfun")
install.packages("xfun")
install.packages("xfun")
# From github
devtools::install_github("maRce10/sketchy")
# load package
library(sketchy)
make_compendium(name = "Proyecto_Silvia", path = path, format = compendiums$output_figures$skeleton,
comments = compendiums$output_figures$comments, packrat = TRUE, git = TRUE)
make_compendium(name = "Proyecto_Silvia", path = path, format = compendiums$output_figures$skeleton,
comments = compendiums$output_figures$comments, packrat = TRUE)
path="~/Ciencia _rep/Silvia_Proyectofinal_CienciaRep/Silvia_proyect"
make_compendium(name = "Proyecto_Silvia", path = path, format = compendiums$output_figures$skeleton,
comments = compendiums$output_figures$comments, packrat = TRUE)
make_compendium(name = "Proyecto_Silvia", path = path, format = compendiums$figures$skeleton,
comments = compendiums$output_figures$comments, packrat = TRUE)
make_compendium(name = "Proyecto_Silvia", path = path, format = compendiums$figures$skeleton,
comments = compendiums$output_figures$comments, packrat = TRUE, force = TRUE)
path="~/Ciencia _rep/Silvia_Proyectofinal_CienciaRep"
path="~/Ciencia _rep/Silvia_Proyectofinal_CienciaRep"
make_compendium(name = "Silvia_proyect", path = path, format = compendiums$figures$skeleton,
comments = compendiums$output_figures$comments, packrat = TRUE, force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Se asume que las  coordenadas simuladas son hojas utilizadas  por los grupos (ubicación de grupos en refugios)
leaf_coors <- sim_habitat(n_leaves = 1000, plot = FALSE)
#En esta función  es para generar las hojas disponibles como refugios dentro de un área de muestreo  200 x 300 m2. También crean las variables para el número de grupos,  número de individuos por grupo
sim_habitat <- function(n_groups, n_indiv, n_leaves = 3000, steps = 10000, sig2 = 0.7, plot = TRUE, xlim = c(0, 300), ylim = c(0, 200)) {
if (n_leaves >= steps){
cat(crayon::green(' Alto ahí, no se puede tener más hojas que steps\n'))
stop()
}
t <- 0:steps  # Saltos de tiempo  en el que varia la distribución de hojas en el espacio
## Primero, se crea un set simulación de desviaciones con σ2= 0.7, para los valores de x
x <- rnorm(n = length(t) - 1, sd = sqrt(sig2))
## Ahora se  calcula la suma acumulada de las desviaciones
cx <- c(0, cumsum(x))
plot(t, cx, type = "l", ylim = range(cx))
## Se repiten los dos pasos anteriores para los valores de y
y <- rnorm(n = length(t) - 1, sd = sqrt(sig2))
## suma acumulada de las desviaciones para valores de y
cy <- c(0, cumsum(y))
# Simulación de hojas disponibles como refugios
sel_positions_x <- cumsum((rbinom(n_leaves, size = 2, prob = 0.1) * 400) + 50)
sel_positions_y <- cumsum((rbinom(n_leaves, size = 2, prob = 0.1) * 400) + 50)
sel_positions_x <- (sel_positions_x / max(sel_positions_x)) * steps
sel_positions_y <- (sel_positions_y / max(sel_positions_y)) * steps
slxs <- cx[sel_positions_x]
slys <- cy[sel_positions_y]
# Obtenemos las coordenadas  para el número de hojas disponibles como refugio dentro de los limites del área de estudio  200 x300 m2
slxs <- slxs + abs(min(slxs))
slxs <- (slxs / max(slxs)) * xlim[2]
slys <- slys + abs(min(slys))
slys <- (slys / max(slys)) * ylim[2]
# Se guardan las coordenadas de las hojas en  un data frame
coor_df <- data.frame(lon= slxs, lat = slys)
if (plot)
plot(coor_df$lon, coor_df$lat, pch = 20, col = adjustcolor("green", alpha.f = 0.3), xlim = xlim + c(-10, 10), ylim = ylim + c(-10, 10))
return() ## coor_df
}
# Simular las coordenadas de ubicación para 10 grupos de murciélagos
ubi_groups <- function(leaf_coors, groups, radius_constant = 6){
if (groups >= nrow(leaf_coors)){
cat(crayon::green('No se puede tener más grupos q hojas \n'))
stop()
}
# Determinamos el tamaño  para los 10 grupos, usamos una probabilidaded 0.6 para que los tamaños de grupo tengan  sentido según lo visto  en la naturaleza
group_sizes <- rbinom(n = groups, 10, prob = 0.6)
# extraemos una hoja central para cada grupo
leaves <- sample(1:nrow(leaf_coors), length(group_sizes))
# obtenemos  las coordenanadas para cada hoja central
centers <- leaf_coors[leaves, ]
centers$group_size <- group_sizes
centers$leaves <- leaves # todas  estas que estan hojas pertencen al los ambitos de  descanso de  un grupo.
# Se calculan todas las distancias posibles entre la hoja central  mediante una matriz de distancia  entre las hojas disponibles.
dist_leaves <- as.matrix(dist(leaf_coors))
group_leaves_l <- lapply(1:nrow(centers), function(x){
dists_to_center <- dist_leaves[centers$leaves[x], ]
# Se seleccionan las hojas  cuya distancia al centro sea menor que el tamaño del grupo multiplicado por un radio constante,
selec_leaves <- dists_to_center[dists_to_center < centers$group_size[x] * radius_constant]
# Se crea un data frame de las hojas selecionadas y sus respectivas coordenadas
selec_leaves_df <- leaf_coors[names(selec_leaves), ]
selec_leaves_df$leaf_id <- names(selec_leaves)
selec_leaves_df$dist_to_center <- selec_leaves
selec_leaves_df$group_size <- centers$group_size[x]
selec_leaves_df$id <- x
return(selec_leaves_df)
})
group_leaves <- do.call(rbind, group_leaves_l)
return(group_leaves)
}
#Función para obtener  determinar estimar los ámbitos de descanso para cada grupo,  con un 95% de confianza .
get_home_range <- function(X, percent = 95){
Y <- SpatialPointsDataFrame(X[, c("lat", "lon")], as.data.frame(X$id))
ud <- try(kernelUD(Y), silent = TRUE)
areas <- unlist(as.data.frame(kernel.area(ud, percent = percent))[1,, drop = TRUE])
areas_df <- data.frame(group = 1:length(areas), area = areas, group_size = sapply(unique(X$id), function(e) X$group_size[X$id == e][1]))
return(areas_df)
}
### Esta  funcion es para  haces  un submuestreo y confirmar  si  el resultado  mantiene  el mismo patron
resample_leaves <- function(X, n = 30){
out <- lapply(unique(X$id), function(x){
Y <- X[X$id == x, ]
if (nrow(Y) > n)
Y <- Y[sample(1:nrow(Y), n), ]
return(Y)
})
return(do.call(rbind, out))
}
# Se asume que las  coordenadas simuladas son hojas utilizadas  por los grupos (ubicación de grupos en refugios)
leaf_coors <- sim_habitat(n_leaves = 1000, plot = FALSE)
sims <- ubi_groups(leaf_coors = leaf_coors, groups = 10, radius_constant = 6)
leaf_coors <- sim_habitat(n_leaves = 1000, plot = FALSE)
leaf_coors <- sim_habitat(n_leaves = 1000, plot = FALSE)
#En esta función  es para generar las hojas disponibles como refugios dentro de un área de muestreo  200 x 300 m2. También crean las variables para el número de grupos,  número de individuos por grupo
sim_habitat <- function(n_groups, n_indiv, n_leaves = 3000, steps = 10000, sig2 = 0.7, plot = TRUE, xlim = c(0, 300), ylim = c(0, 200)) {
if (n_leaves >= steps){
cat(crayon::green(' Alto ahí, no se puede tener más hojas que steps\n'))
stop()
}
t <- 0:steps  # Saltos de tiempo  en el que varia la distribución de hojas en el espacio
## Primero, se crea un set simulación de desviaciones con σ2= 0.7, para los valores de x
x <- rnorm(n = length(t) - 1, sd = sqrt(sig2))
## Ahora se  calcula la suma acumulada de las desviaciones
cx <- c(0, cumsum(x))
plot(t, cx, type = "l", ylim = range(cx))
## Se repiten los dos pasos anteriores para los valores de y
y <- rnorm(n = length(t) - 1, sd = sqrt(sig2))
## suma acumulada de las desviaciones para valores de y
cy <- c(0, cumsum(y))
# Simulación de hojas disponibles como refugios
sel_positions_x <- cumsum((rbinom(n_leaves, size = 2, prob = 0.1) * 400) + 50)
sel_positions_y <- cumsum((rbinom(n_leaves, size = 2, prob = 0.1) * 400) + 50)
sel_positions_x <- (sel_positions_x / max(sel_positions_x)) * steps
sel_positions_y <- (sel_positions_y / max(sel_positions_y)) * steps
slxs <- cx[sel_positions_x]
slys <- cy[sel_positions_y]
# Obtenemos las coordenadas  para el número de hojas disponibles como refugio dentro de los limites del área de estudio  200 x300 m2
slxs <- slxs + abs(min(slxs))
slxs <- (slxs / max(slxs)) * xlim[2]
slys <- slys + abs(min(slys))
slys <- (slys / max(slys)) * ylim[2]
# Se guardan las coordenadas de las hojas en  un data frame
coor_df <- data.frame(lon= slxs, lat = slys)
if (plot)
plot(coor_df$lon, coor_df$lat, pch = 20, col = adjustcolor("green", alpha.f = 0.3), xlim = xlim + c(-10, 10), ylim = ylim + c(-10, 10))
return() ## coor_df
}
#En esta función  es para generar las hojas disponibles como refugios dentro de un área de muestreo  200 x 300 m2. También crean las variables para el número de grupos,  número de individuos por grupo
sim_habitat <- function(n_groups, n_indiv, n_leaves = 3000, steps = 10000, sig2 = 0.7, plot = TRUE, xlim = c(0, 300), ylim = c(0, 200)) {
if (n_leaves >= steps){
cat(crayon::green(' Alto ahí, no se puede tener más hojas que steps\n'))
stop()
}
t <- 0:steps  # Saltos de tiempo  en el que varia la distribución de hojas en el espacio
## Primero, se crea un set simulación de desviaciones con σ2= 0.7, para los valores de x
x <- rnorm(n = length(t) - 1, sd = sqrt(sig2))
## Ahora se  calcula la suma acumulada de las desviaciones
cx <- c(0, cumsum(x))
plot(t, cx, type = "l", ylim = range(cx))
## Se repiten los dos pasos anteriores para los valores de y
y <- rnorm(n = length(t) - 1, sd = sqrt(sig2))
## suma acumulada de las desviaciones para valores de y
cy <- c(0, cumsum(y))
# Simulación de hojas disponibles como refugios
sel_positions_x <- cumsum((rbinom(n_leaves, size = 2, prob = 0.1) * 400) + 50)
sel_positions_y <- cumsum((rbinom(n_leaves, size = 2, prob = 0.1) * 400) + 50)
sel_positions_x <- (sel_positions_x / max(sel_positions_x)) * steps
sel_positions_y <- (sel_positions_y / max(sel_positions_y)) * steps
slxs <- cx[sel_positions_x]
slys <- cy[sel_positions_y]
# Obtenemos las coordenadas  para el número de hojas disponibles como refugio dentro de los limites del área de estudio  200 x300 m2
slxs <- slxs + abs(min(slxs))
slxs <- (slxs / max(slxs)) * xlim[2]
slys <- slys + abs(min(slys))
slys <- (slys / max(slys)) * ylim[2]
# Se guardan las coordenadas de las hojas en  un data frame
coor_df <- data.frame(lon= slxs, lat = slys)
if (plot)
plot(coor_df$lon, coor_df$lat, pch = 20, col = adjustcolor("green", alpha.f = 0.3), xlim = xlim + c(-10, 10), ylim = ylim + c(-10, 10))
return() ## coor_df
}
# Simular las coordenadas de ubicación para 10 grupos de murciélagos
ubi_groups <- function(leaf_coors, groups, radius_constant = 6){
if (groups >= nrow(leaf_coors)){
cat(crayon::green('No se puede tener más grupos q hojas \n'))
stop()
}
# Determinamos el tamaño  para los 10 grupos, usamos una probabilidaded 0.6 para que los tamaños de grupo tengan  sentido según lo visto  en la naturaleza
group_sizes <- rbinom(n = groups, 10, prob = 0.6)
# extraemos una hoja central para cada grupo
leaves <- sample(1:nrow(leaf_coors), length(group_sizes))
# obtenemos  las coordenanadas para cada hoja central
centers <- leaf_coors[leaves, ]
centers$group_size <- group_sizes
centers$leaves <- leaves # todas  estas que estan hojas pertencen al los ambitos de  descanso de  un grupo.
# Se calculan todas las distancias posibles entre la hoja central  mediante una matriz de distancia  entre las hojas disponibles.
dist_leaves <- as.matrix(dist(leaf_coors))
group_leaves_l <- lapply(1:nrow(centers), function(x){
dists_to_center <- dist_leaves[centers$leaves[x], ]
# Se seleccionan las hojas  cuya distancia al centro sea menor que el tamaño del grupo multiplicado por un radio constante,
selec_leaves <- dists_to_center[dists_to_center < centers$group_size[x] * radius_constant]
# Se crea un data frame de las hojas selecionadas y sus respectivas coordenadas
selec_leaves_df <- leaf_coors[names(selec_leaves), ]
selec_leaves_df$leaf_id <- names(selec_leaves)
selec_leaves_df$dist_to_center <- selec_leaves
selec_leaves_df$group_size <- centers$group_size[x]
selec_leaves_df$id <- x
return(selec_leaves_df)
})
group_leaves <- do.call(rbind, group_leaves_l)
return(group_leaves)
}
#Función para obtener  determinar estimar los ámbitos de descanso para cada grupo,  con un 95% de confianza .
get_home_range <- function(X, percent = 95){
Y <- SpatialPointsDataFrame(X[, c("lat", "lon")], as.data.frame(X$id))
ud <- try(kernelUD(Y), silent = TRUE)
areas <- unlist(as.data.frame(kernel.area(ud, percent = percent))[1,, drop = TRUE])
areas_df <- data.frame(group = 1:length(areas), area = areas, group_size = sapply(unique(X$id), function(e) X$group_size[X$id == e][1]))
return(areas_df)
}
### Esta  funcion es para  haces  un submuestreo y confirmar  si  el resultado  mantiene  el mismo patron
resample_leaves <- function(X, n = 30){
out <- lapply(unique(X$id), function(x){
Y <- X[X$id == x, ]
if (nrow(Y) > n)
Y <- Y[sample(1:nrow(Y), n), ]
return(Y)
})
return(do.call(rbind, out))
}
mod <- lm(area ~ group_size, data = range_and_size)
# Simular las coordenadas de ubicación para 10 grupos de murciélagos
ubi_groups <- function(leaf_coors, groups, radius_constant = 6){
if (groups >= nrow(leaf_coors)){
cat(crayon::green('No se puede tener más grupos q hojas \n'))
stop()
}
# Determinamos el tamaño  para los 10 grupos, usamos una probabilidaded 0.6 para que los tamaños de grupo tengan  sentido según lo visto  en la naturaleza
group_sizes <- rbinom(n = groups, 10, prob = 0.6)
# extraemos una hoja central para cada grupo
leaves <- sample(1:nrow(leaf_coors), length(group_sizes))
# obtenemos  las coordenanadas para cada hoja central
centers <- leaf_coors[leaves, ]
centers$group_size <- group_sizes
centers$leaves <- leaves # todas  estas que estan hojas pertencen al los ambitos de  descanso de  un grupo.
# Se calculan todas las distancias posibles entre la hoja central  mediante una matriz de distancia  entre las hojas disponibles.
dist_leaves <- as.matrix(dist(leaf_coors))
group_leaves_l <- lapply(1:nrow(centers), function(x){
dists_to_center <- dist_leaves[centers$leaves[x], ]
# Se seleccionan las hojas  cuya distancia al centro sea menor que el tamaño del grupo multiplicado por un radio constante,
selec_leaves <- dists_to_center[dists_to_center < centers$group_size[x] * radius_constant]
# Se crea un data frame de las hojas selecionadas y sus respectivas coordenadas
selec_leaves_df <- leaf_coors[names(selec_leaves), ]
selec_leaves_df$leaf_id <- names(selec_leaves)
selec_leaves_df$dist_to_center <- selec_leaves
selec_leaves_df$group_size <- centers$group_size[x]
selec_leaves_df$id <- x
return(selec_leaves_df)
})
group_leaves <- do.call(rbind, group_leaves_l)
return(group_leaves)
}
# Se asume que las  coordenadas simuladas son hojas utilizadas  por los grupos (ubicación de grupos en refugios)
leaf_coors <- sim_habitat(n_leaves = 1000, plot = FALSE)
sims <- ubi_groups(leaf_coors = leaf_coors, groups = 10, radius_constant = 6)
knitr::opts_chunk$set(echo = TRUE)
# graficar
ggdag(dag1, layout = "circle") + theme_dag()
# install_github("jtextor/dagitty/r")
require(dagitty)
# install.packages("ggdag")
require(ggdag)
# install.packages("wesanderson")
require(wesanderson)
#Modelo con un DAG:
# x = H
# z = TG
# y = AD
# Crear DAG
dag1 <- dagify(AD ~ TG,
AD~ H,
exposure = "TG",
outcome = "AD")
# compactar
tidy_dagitty(dag1)
# graficar
ggdag(dag1, layout = "circle") + theme_dag()
# No  existe un flujo de información  entré el tamaño del grupo y la densidad  de hojas disponibles , por lo que no es necesario controlar
# Se cargan los paquetes necesarios para los análisis
library(adehabitatHR) # Home Range Estimation
library(ggplot2)
#En esta función  es para generar las hojas disponibles como refugios dentro de un área de muestreo  200 x 300 m2. También crean las variables para el número de grupos,  número de individuos por grupo
sim_habitat <- function(n_groups, n_indiv, n_leaves = 3000, steps = 10000, sig2 = 0.7, plot = TRUE, xlim = c(0, 300), ylim = c(0, 200)) {
if (n_leaves >= steps){
cat(crayon::green(' Alto ahí, no se puede tener más hojas que steps\n'))
stop()
}
t <- 0:steps  # Saltos de tiempo  en el que varia la distribución de hojas en el espacio
## Primero, se crea un set simulación de desviaciones con σ2= 0.7, para los valores de x
x <- rnorm(n = length(t) - 1, sd = sqrt(sig2))
## Ahora se  calcula la suma acumulada de las desviaciones
cx <- c(0, cumsum(x))
plot(t, cx, type = "l", ylim = range(cx))
## Se repiten los dos pasos anteriores para los valores de y
y <- rnorm(n = length(t) - 1, sd = sqrt(sig2))
## suma acumulada de las desviaciones para valores de y
cy <- c(0, cumsum(y))
# Simulación de hojas disponibles como refugios
sel_positions_x <- cumsum((rbinom(n_leaves, size = 2, prob = 0.1) * 400) + 50)
sel_positions_y <- cumsum((rbinom(n_leaves, size = 2, prob = 0.1) * 400) + 50)
sel_positions_x <- (sel_positions_x / max(sel_positions_x)) * steps
sel_positions_y <- (sel_positions_y / max(sel_positions_y)) * steps
slxs <- cx[sel_positions_x]
slys <- cy[sel_positions_y]
# Obtenemos las coordenadas  para el número de hojas disponibles como refugio dentro de los limites del área de estudio  200 x300 m2
slxs <- slxs + abs(min(slxs))
slxs <- (slxs / max(slxs)) * xlim[2]
slys <- slys + abs(min(slys))
slys <- (slys / max(slys)) * ylim[2]
# Se guardan las coordenadas de las hojas en  un data frame
coor_df <- data.frame(lon= slxs, lat = slys)
if (plot)
plot(coor_df$lon, coor_df$lat, pch = 20, col = adjustcolor("green", alpha.f = 0.3), xlim = xlim + c(-10, 10), ylim = ylim + c(-10, 10))
return() ## coor_df
}
# Simular las coordenadas de ubicación para 10 grupos de murciélagos
ubi_groups <- function(leaf_coors, groups, radius_constant = 6){
if (groups >= nrow(leaf_coors)){
cat(crayon::green('No se puede tener más grupos q hojas \n'))
stop()
}
# Determinamos el tamaño  para los 10 grupos, usamos una probabilidaded 0.6 para que los tamaños de grupo tengan  sentido según lo visto  en la naturaleza
group_sizes <- rbinom(n = groups, 10, prob = 0.6)
# extraemos una hoja central para cada grupo
leaves <- sample(1:nrow(leaf_coors), length(group_sizes))
# obtenemos  las coordenanadas para cada hoja central
centers <- leaf_coors[leaves, ]
centers$group_size <- group_sizes
centers$leaves <- leaves # todas  estas que estan hojas pertencen al los ambitos de  descanso de  un grupo.
# Se calculan todas las distancias posibles entre la hoja central  mediante una matriz de distancia  entre las hojas disponibles.
dist_leaves <- as.matrix(dist(leaf_coors))
group_leaves_l <- lapply(1:nrow(centers), function(x){
dists_to_center <- dist_leaves[centers$leaves[x], ]
# Se seleccionan las hojas  cuya distancia al centro sea menor que el tamaño del grupo multiplicado por un radio constante,
selec_leaves <- dists_to_center[dists_to_center < centers$group_size[x] * radius_constant]
# Se crea un data frame de las hojas selecionadas y sus respectivas coordenadas
selec_leaves_df <- leaf_coors[names(selec_leaves), ]
selec_leaves_df$leaf_id <- names(selec_leaves)
selec_leaves_df$dist_to_center <- selec_leaves
selec_leaves_df$group_size <- centers$group_size[x]
selec_leaves_df$id <- x
return(selec_leaves_df)
})
group_leaves <- do.call(rbind, group_leaves_l)
return(group_leaves)
}
#Función para obtener  determinar estimar los ámbitos de descanso para cada grupo,  con un 95% de confianza .
get_home_range <- function(X, percent = 95){
Y <- SpatialPointsDataFrame(X[, c("lat", "lon")], as.data.frame(X$id))
ud <- try(kernelUD(Y), silent = TRUE)
areas <- unlist(as.data.frame(kernel.area(ud, percent = percent))[1,, drop = TRUE])
areas_df <- data.frame(group = 1:length(areas), area = areas, group_size = sapply(unique(X$id), function(e) X$group_size[X$id == e][1]))
return(areas_df)
}
### Esta  funcion es para  haces  un submuestreo y confirmar  si  el resultado  mantiene  el mismo patron
resample_leaves <- function(X, n = 30){
out <- lapply(unique(X$id), function(x){
Y <- X[X$id == x, ]
if (nrow(Y) > n)
Y <- Y[sample(1:nrow(Y), n), ]
return(Y)
})
return(do.call(rbind, out))
}
# Se asume que las  coordenadas simuladas son hojas utilizadas  por los grupos (ubicación de grupos en refugios)
leaf_coors <- sim_habitat(n_leaves = 1000, plot = FALSE)
sims <- ubi_groups(leaf_coors = leaf_coors, groups = 10, radius_constant = 6)
# Simular las coordenadas de ubicación para 10 grupos de murciélagos
sim_home_range <- function(leaf_coors, groups, radius_constant = 6){
if (groups >= nrow(leaf_coors)){
cat(crayon::green('No se puede tener más grupos q hojas \n'))
stop()
}
# Determinamos el tamaño  para los 10 grupos, usamos una probabilidaded 0.6 para que los tamaños de grupo tengan  sentido según lo visto  en la naturaleza
group_sizes <- rbinom(n = groups, 10, prob = 0.6)
# extraemos una hoja central para cada grupo
leaves <- sample(1:nrow(leaf_coors), length(group_sizes))
# obtenemos  las coordenanadas para cada hoja central
centers <- leaf_coors[leaves, ]
centers$group_size <- group_sizes
centers$leaves <- leaves # todas  estas que estan hojas pertencen al los ambitos de  descanso de  un grupo.
# Se calculan todas las distancias posibles entre la hoja central  mediante una matriz de distancia  entre las hojas disponibles.
dist_leaves <- as.matrix(dist(leaf_coors))
group_leaves_l <- lapply(1:nrow(centers), function(x){
dists_to_center <- dist_leaves[centers$leaves[x], ]
# Se seleccionan las hojas  cuya distancia al centro sea menor que el tamaño del grupo multiplicado por un radio constante,
selec_leaves <- dists_to_center[dists_to_center < centers$group_size[x] * radius_constant]
# Se crea un data frame de las hojas selecionadas y sus respectivas coordenadas
selec_leaves_df <- leaf_coors[names(selec_leaves), ]
selec_leaves_df$leaf_id <- names(selec_leaves)
selec_leaves_df$dist_to_center <- selec_leaves
selec_leaves_df$group_size <- centers$group_size[x]
selec_leaves_df$id <- x
return(selec_leaves_df)
})
group_leaves <- do.call(rbind, group_leaves_l)
return(group_leaves)
}
#Función para obtener  determinar estimar los ámbitos de descanso para cada grupo,  con un 95% de confianza .
get_home_range <- function(X, percent = 95){
Y <- SpatialPointsDataFrame(X[, c("lat", "lon")], as.data.frame(X$id))
ud <- try(kernelUD(Y), silent = TRUE)
areas <- unlist(as.data.frame(kernel.area(ud, percent = percent))[1,, drop = TRUE])
areas_df <- data.frame(group = 1:length(areas), area = areas, group_size = sapply(unique(X$id), function(e) X$group_size[X$id == e][1]))
return(areas_df)
}
### Esta  funcion es para  haces  un submuestreo y confirmar  si  el resultado  mantiene  el mismo patron
resample_leaves <- function(X, n = 30){
out <- lapply(unique(X$id), function(x){
Y <- X[X$id == x, ]
if (nrow(Y) > n)
Y <- Y[sample(1:nrow(Y), n), ]
return(Y)
})
return(do.call(rbind, out))
}
# Se asume que las  coordenadas simuladas son hojas utilizadas  por los grupos (ubicación de grupos en refugios)
leaf_coors <- sim_habitat(n_leaves = 1000, plot = FALSE)
sims <- sim_home_range(leaf_coors = leaf_coors, groups = 10, radius_constant = 6)
